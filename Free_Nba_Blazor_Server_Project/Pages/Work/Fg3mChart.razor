@page "/fg3mchart"

@inject IStatsService StatsService
@using Blazorise.Charts

<PageTitle>İstatistik</PageTitle>
<h2>Oyuncular Üçlük İsabet Sayısı İstatistik Listesi</h2>
<div class="container pb-2 pt-2">

	@if (stats != null && stats.Any())
	{
		<Chart @ref="barChart" Type="ChartType.Bar" TItem="int" />
	}

</div>

@code {
	private List<Free_Nba_Blazor_Server_Project.Model.Stats> stats = new List<Free_Nba_Blazor_Server_Project.Model.Stats>();
	private string[] Labels;
	private List<int> Dataset = new List<int>();
	private List<BlockCharts> chartDataList = new List<BlockCharts>();
	private BlockCharts chartData = new BlockCharts();
	Chart<int> barChart = new Chart<int>();

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await List();
			await HandleRedraw();
		}
	}

	async Task HandleRedraw()
	{
		await barChart.AddLabelsDatasetsAndUpdate(Labels, GetBarChartDataset());
	}

	private BarChartDataset<int> GetBarChartDataset()
	{
		return new()
			{
				Label = "# üçlük isabet sayısı",
				Data = RandomizeData(),
				BackgroundColor = backgroundColors,
				BorderColor = borderColors,
				BorderWidth = 1
			};
	}

	List<string> backgroundColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 0.2f), ChartColor.FromRgba(54, 162, 235, 0.2f), ChartColor.FromRgba(255, 206, 86, 0.2f), ChartColor.FromRgba(75, 192, 192, 0.2f), ChartColor.FromRgba(153, 102, 255, 0.2f), ChartColor.FromRgba(255, 159, 64, 0.2f) };
	List<string> borderColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 1f), ChartColor.FromRgba(54, 162, 235, 1f), ChartColor.FromRgba(255, 206, 86, 1f), ChartColor.FromRgba(75, 192, 192, 1f), ChartColor.FromRgba(153, 102, 255, 1f), ChartColor.FromRgba(255, 159, 64, 1f) };

	List<int> RandomizeData()
	{
		return Dataset;
	}


	async Task List()
	{
		var statsResult = await StatsService.GetAllStatsAsync();
		if (statsResult != null)
		{
			stats = statsResult.ToList();
			stats = stats.OrderByDescending(x => x.fg3m).ToList();
		}
		await ChartList();
		StateHasChanged();
	}
	async Task ChartList()
	{
		var counter = 0;
		foreach (var stat in stats)
		{
			if (stat.fg3m != null)
			{
				if (Convert.ToInt32(stat.fg3m) > 0)
				{
					counter++;
					if (counter == 16) break;
					chartData = new BlockCharts();
					chartData.id = counter;
					chartData.Name = stat.player.first_name + " " + stat.player.last_name;
					chartData.Fg3mCount = Convert.ToInt32(stat.fg3m);
					chartDataList.Add(chartData);
					Dataset.Add(Convert.ToInt32(stat.fg3m));
				}
			}
		}
		Labels = new string[chartDataList.Count];
		var counters = 0;
		foreach (var stat in stats)
		{

			Labels[counters] = stat.player.first_name+" "+stat.player.last_name;
			counters++;
			if (counters == chartDataList.Count) break;
		}
	}



	public class BlockCharts
	{
		public int id { get; set; }
		public string Name { get; set; }
		public int Fg3mCount { get; set; }
	}
}
